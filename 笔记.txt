NodeJS

石川-Blue

周二、周五	20:00~21:00

»论坛›课程讨论›线上课程› 2016-11-20 NodeJS周末班

-----------

NodeJS
框架-express、koa

------------------------------------------------------------------------------------------

NodeJS：用JavaScript写服务端

后台：PHP、Java、Python
1.Node比其他语言——好在哪儿
  性能高
  上手快
  跟前台配合方便

2.工作Node用来干啥
  a.工具类——压缩、下载、监测
  b.网站后台

------------------------------------------------------------------------------------------

1.下载
https://nodejs.org/en/

2.安装

3.测试
NodeJS - 命令行
windows		win键+r -> cmd ->
linux(mac、unix)	终端

node

------------------------------------------------------------------------------------------

NodeJS和JavaScript语言一模一样

方法1.命令行
1.切换盘符	e:
2.进入目录	cd node
3.执行程序	node 1.js

方法2.atom(Sublime)
搜索"script" -> 安装
  ctrl+shift+b	执行
  ctrl+q		结束

------------------------------------------------------------------------------------------

1.NodeJS：性能、上手、前台配合
2.搭建：下载(nodejs.org)->安装->运行代码
3.运行代码：盘符 -> cd -> node xxx.js

------------------------------------------------------------------------------------------

*NodeJS和JavaScript东西差不多

------------------------------------------------------------------------------------------

用NodeJS搭建HTTP服务器
HTTP协议

------------------------------------------------------------------------------------------

Assertion Testing	断言测试

------------------------------------------------------------------------------------------

端口-数字：随便用、不能跟别人抢

默认端口
web		80
ftp		21/22
mysql		3306

1~65535

------------------------------------------------------------------------------------------

//1.引模块
const http=require('http');

//2.创建服务
var server=http.createServer(回调);

//3.监听
server.listen(端口);

fileSystem->fs

------------------------------------------------------------------------------------------

传统后台语言——java
	同步多线程
		多线程-编写特别麻烦、性能高

新型后台语言——NodeJS
	异步单线程
		单线程-编写轻松、性能低
		异步-代替多线程

------------------------------------------------------------------------------------------

异步操作：可以同时处理很多事情，前一个没结束后一个也能进行
同步操作：一个个来，前一个没结束后一个没法开始

------------------------------------------------------------------------------------------

http模块：
http.createServer(function (req, res){
  req.url=>'/1.html'
  res.write/end
});

fs模块：
fs.readFile('文件地址', function (err, data){});

------------------------------------------------------------------------------------------

fs.readFile(function (){
  res.write(data);
});

res.end();

------------------------------------------------------------------------------------------

解析前台数据：

前台 -> 后台	后台没有任何区别
1.表单
2.ajax
3.jsonp

表单：get、post
1.get-数据在url里面
  数据量小

2.post-数据在content里面
  数据量大

>1G	客户端、插件

------------------------------------------------------------------------------------------

1.post不在url里——怎么接收
2.post比较大——

------------------------------------------------------------------------------------------

GET
urlLib.parse(req.url, true);
  -> pathname	地址
  -> query	数据

POST
querystring.parse(str);
  -> {xxx, xxx, xxx}

------------------------------------------------------------------------------------------

每周周二、周五		20:00~21:00

------------------------------------------------------------------------------------------

1.NodeJS的模块——http, fs, url, querystring
2.解析数据、服务

------------------------------------------------------------------------------------------

a.模块
b.post正确方式

------------------------------------------------------------------------------------------

require：
1.引入系统模块
2.引入自定义模块

不加./	引入系统模块
加了./	引入自己的模块

------------------------------------------------------------------------------------------

1.引入自己的模块，加./	？
2.外面能用某个东西，必须输出，必须加到exports身上

module.exports == mod

module.exports={a: 12, b: 5, c: 99};
mod=>{a: 12, b: 5, c: 99}	mod.a

module.exports=function (){
};
mod=>function (){
}

------------------------------------------------------------------------------------------

自己的模块
新建文件，exports、module.exports输出东西

------------------------------------------------------------------------------------------

npm=>Node Package Manager	包管理器
用来下载包、更新

------------------------------------------------------------------------------------------

zns-add

https://www.npmjs.com/

------------------------------------------------------------------------------------------

1.编写模块
  exports
  module.exports
  require
2.引入自己的模块
  选择1.加上"./"
  选择2.放进"node_modules"
3.npm
  npm install 包

  发布：npm login -> npm whoami -> npm init -> 编写模块 -> npm publish -> npm unpublish --force
4.cnpm
  npm.taobao.org

  cnpm install mysql

------------------------------------------------------------------------------------------

模块化

------------------------------------------------------------------------------------------

post数据
Buffer操作

------------------------------------------------------------------------------------------

Buffer-二进制原始数据
Buffer.concat

------------------------------------------------------------------------------------------

post数据：a=12&b=22&c=xxx

上传文件数据：
1.form加个东西	enctype="multipart/form-data"

------------------------------------------------------------------------------------------

普通数据(urlencode)：
名字=值&名字=值&...

multipart数据：
---
文件描述

文件内容
-------分隔符--------
文件描述

文件内容
-------分隔符--------
....

------------------------------------------------------------------------------------------

服务器-数据库：
mysql、oracle、sqlserver、db2、sqlite、access

mysql用的最多——免费

------------------------------------------------------------------------------------------

mysql：
1.服务端
2.客户端<-node

------------------------------------------------------------------------------------------

数据库：
库-文件夹	只是管理，不能存数据
表-文件		存数据

表 类似 excel
1.行	1条数据
2.列	1个项目

------------------------------------------------------------------------------------------

1.Navicat for MySQL
2.PHPMyAdmin

------------------------------------------------------------------------------------------

Navicat
1.创建连接(左上角-连接)
  地址、名字、端口 -> 确定
2.创建库(右键-新建数据库)
  名字、字符集(utf8 -- UTF-8 Unicode)、排序规则(utf8_general_ci)
  打开数据库(双击、右键打开)
  新建表(右键-新建表)、添加项目->保存
3.添加数据
  右键->打开表

------------------------------------------------------------------------------------------

JS-没有
数据库-严格限制类型

int-整数
float-小数
varchar-字符串(短,255)
text-字符串(长,2G)

------------------------------------------------------------------------------------------

SQL - 操作数据库：
增-INSERT
删-DELETE
改-UPDATE
查-SELECT

SELECT 什么 FROM 表

SELECT * FROM user_table;

------------------------------------------------------------------------------------------

数据库：
1.服务端、客户端
2.分库、表
  库——不能存东西
  表——存数据
3.表
  行——1条数据
  列(字段、域)——1个项目

NodeJS操作MySQL
1.下载mysql模块
  cnpm install mysql
2.引入
  const mysql=require('mysql');
3.连接
  mysql.createConnection({host, port, user, password, database});
4.查询
  db.query("SQL语句", function (err, data){});

------------------------------------------------------------------------------------------

http/fs/mysql——用户注册、登录

接口：
/login?user=xxxx&pass=xxxx
  =>{ok: false, msg: "密码错了、用户不存在"}
/register?user=xxxx&pass=xxx
  =>{ok: false, msg: "密码错了、用户不存在"}

前台 -> 后台
1.文件
http://localhost:8080/index.html
http://localhost:8080/script/ajax.js
http://localhost:8080/images/1.jpg

2.接口
http://localhost:8080/login?xxxx

------------------------------------------------------------------------------------------

SELECT * FROM user_table WHERE 条件;

SELECT * FROM user_table WHERE user='blue';
SELECT * FROM user_table WHERE age>18;
SELECT * FROM user_table WHERE (chinese+math+english)/3<60;
SELECT * FROM user_table WHERE age>18 AND math<60;
SELECT * FROM user_table WHERE chinese<60 OR math<60 OR english<60;

------------------------------------------------------------------------------------------

INSERT INTO user_table (ID, username, password) VALUES(0, 'blue', '123456');











